#! /usr/bin/python

import os
import sys
import argparse
from pathlib import Path
from contextlib import contextmanager
import json
import codecs

@contextmanager
def pushPath(path):
    old_dir = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(old_dir)


def gather_files(p, ext, exclude):
    from itertools import groupby
    from operator import itemgetter
    all_files = [ (i.parent.relative_to(p), i.name) for i in filter(lambda x: not x.match(exclude), p.rglob(ext))]
    return [(str(k), list(list(zip(*g))[1])) for k, g in groupby(all_files, itemgetter(0))]


def gen_unit_files(p, base, define, files):
    for d,f in files:
        if d == '.':
            continue
        unitpath = p.joinpath(d)
        unitfile = p.joinpath(d).joinpath(unitpath.name + base)
        print('generating {} for folder {} ({} include(s))'.format(unitfile.name, unitpath.relative_to(p), len(f)))
        with codecs.open(unitfile, 'w', 'utf-8') as fh:
            fh.write('//! GENERATED BY {}\n'.format(__file__))
            fh.write('//! DO NOT EDIT\n\n')
            fh.write('//! unit build file for {}\n\n'.format(unitpath.relative_to(p)))

            fh.write('#ifdef {}\n\n'.format(define))
            fh.writelines(['#include "{}"\n'.format(i) for i in f])
            fh.write('\n#endif //{}\n\n'.format(define))


def main(args):
    #print(args)
    assert args.input_path.exists(), "{} does not seem to exist".format(args.input_path)
    print('gathering "{}" files in {} into "{}" unitbuild sources'.format(args.extension, args.input_path, args.filebase))
    ff = gather_files(args.input_path, args.extension, '*' + args.filebase)
    #print(json.dumps(ff, indent=True))
    gen_unit_files(args.input_path, args.filebase, args.define, ff)



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input-path', help='folder to look at', type=Path)
    parser.add_argument('-f', '--filebase', help='file base', type=str, default='_unit.cpp')
    parser.add_argument('-e', '--extension', help='file extension', type=str, default='*.cpp')
    parser.add_argument('-D', '--define', help='#define for unit build', type=str, default='UNITBUILD')
    args = parser.parse_args()
    args.input_path = Path(__file__).parent.joinpath(args.input_path).resolve()
    main(args)


